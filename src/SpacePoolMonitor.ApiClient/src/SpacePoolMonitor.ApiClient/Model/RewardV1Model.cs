/*
 * Space Pool Developer API
 *
 * Space Pool public developer REST APIs
 *
 * The version of the OpenAPI document: v1
 * Contact: info@pool.space
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SpacePoolMonitor.ApiClient.Client.OpenAPIDateConverter;

namespace SpacePoolMonitor.ApiClient.Model
{
    /// <summary>
    /// RewardV1Model
    /// </summary>
    [DataContract(Name = "RewardV1Model")]
    public partial class RewardV1Model : IEquatable<RewardV1Model>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RewardV1Model" /> class.
        /// </summary>
        /// <param name="rewardDateTimeUtc">Date and time the reward was earned by the farm.</param>
        /// <param name="sharePercent">Percent of rewards earned by the farm for the round, normalized to 1..</param>
        /// <param name="rewardInMojo">Amount of the reward, in Mojo.</param>
        /// <param name="feesWithheldInMojo">Pool fees withheld from the reward, in Mojo.</param>
        /// <param name="blockNumber">Block number of the block that generated the reward.</param>
        public RewardV1Model(string rewardDateTimeUtc = default(string), double sharePercent = default(double), long rewardInMojo = default(long), long feesWithheldInMojo = default(long), long blockNumber = default(long))
        {
            this.RewardDateTimeUtc = rewardDateTimeUtc;
            this.SharePercent = sharePercent;
            this.RewardInMojo = rewardInMojo;
            this.FeesWithheldInMojo = feesWithheldInMojo;
            this.BlockNumber = blockNumber;
        }

        /// <summary>
        /// Date and time the reward was earned by the farm
        /// </summary>
        /// <value>Date and time the reward was earned by the farm</value>
        [DataMember(Name = "rewardDateTimeUtc", EmitDefaultValue = true)]
        public string RewardDateTimeUtc { get; set; }

        /// <summary>
        /// Percent of rewards earned by the farm for the round, normalized to 1.
        /// </summary>
        /// <value>Percent of rewards earned by the farm for the round, normalized to 1.</value>
        [DataMember(Name = "sharePercent", EmitDefaultValue = false)]
        public double SharePercent { get; set; }

        /// <summary>
        /// Amount of the reward, in Mojo
        /// </summary>
        /// <value>Amount of the reward, in Mojo</value>
        [DataMember(Name = "rewardInMojo", EmitDefaultValue = false)]
        public long RewardInMojo { get; set; }

        /// <summary>
        /// Pool fees withheld from the reward, in Mojo
        /// </summary>
        /// <value>Pool fees withheld from the reward, in Mojo</value>
        [DataMember(Name = "feesWithheldInMojo", EmitDefaultValue = false)]
        public long FeesWithheldInMojo { get; set; }

        /// <summary>
        /// Block number of the block that generated the reward
        /// </summary>
        /// <value>Block number of the block that generated the reward</value>
        [DataMember(Name = "blockNumber", EmitDefaultValue = false)]
        public long BlockNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RewardV1Model {\n");
            sb.Append("  RewardDateTimeUtc: ").Append(RewardDateTimeUtc).Append("\n");
            sb.Append("  SharePercent: ").Append(SharePercent).Append("\n");
            sb.Append("  RewardInMojo: ").Append(RewardInMojo).Append("\n");
            sb.Append("  FeesWithheldInMojo: ").Append(FeesWithheldInMojo).Append("\n");
            sb.Append("  BlockNumber: ").Append(BlockNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RewardV1Model);
        }

        /// <summary>
        /// Returns true if RewardV1Model instances are equal
        /// </summary>
        /// <param name="input">Instance of RewardV1Model to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RewardV1Model input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RewardDateTimeUtc == input.RewardDateTimeUtc ||
                    (this.RewardDateTimeUtc != null &&
                    this.RewardDateTimeUtc.Equals(input.RewardDateTimeUtc))
                ) && 
                (
                    this.SharePercent == input.SharePercent ||
                    this.SharePercent.Equals(input.SharePercent)
                ) && 
                (
                    this.RewardInMojo == input.RewardInMojo ||
                    this.RewardInMojo.Equals(input.RewardInMojo)
                ) && 
                (
                    this.FeesWithheldInMojo == input.FeesWithheldInMojo ||
                    this.FeesWithheldInMojo.Equals(input.FeesWithheldInMojo)
                ) && 
                (
                    this.BlockNumber == input.BlockNumber ||
                    this.BlockNumber.Equals(input.BlockNumber)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RewardDateTimeUtc != null)
                {
                    hashCode = (hashCode * 59) + this.RewardDateTimeUtc.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SharePercent.GetHashCode();
                hashCode = (hashCode * 59) + this.RewardInMojo.GetHashCode();
                hashCode = (hashCode * 59) + this.FeesWithheldInMojo.GetHashCode();
                hashCode = (hashCode * 59) + this.BlockNumber.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
