/*
 * Space Pool Developer API
 *
 * Space Pool public developer REST APIs
 *
 * The version of the OpenAPI document: v1
 * Contact: info@pool.space
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SpacePoolMonitor.ApiClient.Client.OpenAPIDateConverter;

namespace SpacePoolMonitor.ApiClient.Model
{
    /// <summary>
    /// PayoutV1Model
    /// </summary>
    [DataContract(Name = "PayoutV1Model")]
    public partial class PayoutV1Model : IEquatable<PayoutV1Model>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public PayoutStatusV1? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PayoutV1Model" /> class.
        /// </summary>
        /// <param name="launcherId">Launcher id that the payout was made to.</param>
        /// <param name="coinId">Coin id related to the payout transaction.</param>
        /// <param name="confirmationBlockNumber">Block number that the payout was confirmed under.</param>
        /// <param name="feeInXCH">Block-chain transaction fee for the payout, in XCH.</param>
        /// <param name="payoutBalanceInXCH">Amount that was paid out in this payout transaction, in XCH.</param>
        /// <param name="payoutDateTimeUtc">Date and time the payout was created.</param>
        /// <param name="recipientPuzzleHash">Puzzle hash of the recipient of the payout.</param>
        /// <param name="status">status.</param>
        public PayoutV1Model(string launcherId = default(string), string coinId = default(string), long confirmationBlockNumber = default(long), double feeInXCH = default(double), double payoutBalanceInXCH = default(double), string payoutDateTimeUtc = default(string), string recipientPuzzleHash = default(string), PayoutStatusV1? status = default(PayoutStatusV1?))
        {
            this.LauncherId = launcherId;
            this.CoinId = coinId;
            this.ConfirmationBlockNumber = confirmationBlockNumber;
            this.FeeInXCH = feeInXCH;
            this.PayoutBalanceInXCH = payoutBalanceInXCH;
            this.PayoutDateTimeUtc = payoutDateTimeUtc;
            this.RecipientPuzzleHash = recipientPuzzleHash;
            this.Status = status;
        }

        /// <summary>
        /// Launcher id that the payout was made to
        /// </summary>
        /// <value>Launcher id that the payout was made to</value>
        [DataMember(Name = "launcherId", EmitDefaultValue = true)]
        public string LauncherId { get; set; }

        /// <summary>
        /// Coin id related to the payout transaction
        /// </summary>
        /// <value>Coin id related to the payout transaction</value>
        [DataMember(Name = "coinId", EmitDefaultValue = true)]
        public string CoinId { get; set; }

        /// <summary>
        /// Block number that the payout was confirmed under
        /// </summary>
        /// <value>Block number that the payout was confirmed under</value>
        [DataMember(Name = "confirmationBlockNumber", EmitDefaultValue = false)]
        public long ConfirmationBlockNumber { get; set; }

        /// <summary>
        /// Block-chain transaction fee for the payout, in XCH
        /// </summary>
        /// <value>Block-chain transaction fee for the payout, in XCH</value>
        [DataMember(Name = "feeInXCH", EmitDefaultValue = false)]
        public double FeeInXCH { get; set; }

        /// <summary>
        /// Amount that was paid out in this payout transaction, in XCH
        /// </summary>
        /// <value>Amount that was paid out in this payout transaction, in XCH</value>
        [DataMember(Name = "payoutBalanceInXCH", EmitDefaultValue = false)]
        public double PayoutBalanceInXCH { get; set; }

        /// <summary>
        /// Date and time the payout was created
        /// </summary>
        /// <value>Date and time the payout was created</value>
        [DataMember(Name = "payoutDateTimeUtc", EmitDefaultValue = true)]
        public string PayoutDateTimeUtc { get; set; }

        /// <summary>
        /// Puzzle hash of the recipient of the payout
        /// </summary>
        /// <value>Puzzle hash of the recipient of the payout</value>
        [DataMember(Name = "recipientPuzzleHash", EmitDefaultValue = true)]
        public string RecipientPuzzleHash { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PayoutV1Model {\n");
            sb.Append("  LauncherId: ").Append(LauncherId).Append("\n");
            sb.Append("  CoinId: ").Append(CoinId).Append("\n");
            sb.Append("  ConfirmationBlockNumber: ").Append(ConfirmationBlockNumber).Append("\n");
            sb.Append("  FeeInXCH: ").Append(FeeInXCH).Append("\n");
            sb.Append("  PayoutBalanceInXCH: ").Append(PayoutBalanceInXCH).Append("\n");
            sb.Append("  PayoutDateTimeUtc: ").Append(PayoutDateTimeUtc).Append("\n");
            sb.Append("  RecipientPuzzleHash: ").Append(RecipientPuzzleHash).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PayoutV1Model);
        }

        /// <summary>
        /// Returns true if PayoutV1Model instances are equal
        /// </summary>
        /// <param name="input">Instance of PayoutV1Model to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PayoutV1Model input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.LauncherId == input.LauncherId ||
                    (this.LauncherId != null &&
                    this.LauncherId.Equals(input.LauncherId))
                ) && 
                (
                    this.CoinId == input.CoinId ||
                    (this.CoinId != null &&
                    this.CoinId.Equals(input.CoinId))
                ) && 
                (
                    this.ConfirmationBlockNumber == input.ConfirmationBlockNumber ||
                    this.ConfirmationBlockNumber.Equals(input.ConfirmationBlockNumber)
                ) && 
                (
                    this.FeeInXCH == input.FeeInXCH ||
                    this.FeeInXCH.Equals(input.FeeInXCH)
                ) && 
                (
                    this.PayoutBalanceInXCH == input.PayoutBalanceInXCH ||
                    this.PayoutBalanceInXCH.Equals(input.PayoutBalanceInXCH)
                ) && 
                (
                    this.PayoutDateTimeUtc == input.PayoutDateTimeUtc ||
                    (this.PayoutDateTimeUtc != null &&
                    this.PayoutDateTimeUtc.Equals(input.PayoutDateTimeUtc))
                ) && 
                (
                    this.RecipientPuzzleHash == input.RecipientPuzzleHash ||
                    (this.RecipientPuzzleHash != null &&
                    this.RecipientPuzzleHash.Equals(input.RecipientPuzzleHash))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LauncherId != null)
                {
                    hashCode = (hashCode * 59) + this.LauncherId.GetHashCode();
                }
                if (this.CoinId != null)
                {
                    hashCode = (hashCode * 59) + this.CoinId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ConfirmationBlockNumber.GetHashCode();
                hashCode = (hashCode * 59) + this.FeeInXCH.GetHashCode();
                hashCode = (hashCode * 59) + this.PayoutBalanceInXCH.GetHashCode();
                if (this.PayoutDateTimeUtc != null)
                {
                    hashCode = (hashCode * 59) + this.PayoutDateTimeUtc.GetHashCode();
                }
                if (this.RecipientPuzzleHash != null)
                {
                    hashCode = (hashCode * 59) + this.RecipientPuzzleHash.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
