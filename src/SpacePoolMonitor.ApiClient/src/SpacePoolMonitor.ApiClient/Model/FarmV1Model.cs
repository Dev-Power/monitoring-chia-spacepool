/*
 * Space Pool Developer API
 *
 * Space Pool public developer REST APIs
 *
 * The version of the OpenAPI document: v1
 * Contact: info@pool.space
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SpacePoolMonitor.ApiClient.Client.OpenAPIDateConverter;

namespace SpacePoolMonitor.ApiClient.Model
{
    /// <summary>
    /// FarmV1Model
    /// </summary>
    [DataContract(Name = "FarmV1Model")]
    public partial class FarmV1Model : IEquatable<FarmV1Model>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FarmV1Model" /> class.
        /// </summary>
        /// <param name="launcherId">Launcher id of the farm.</param>
        /// <param name="unpaidBalanceInXCH">Unpaid balance of the farm account, in XCH.</param>
        /// <param name="totalPaidInXCH">Total lifetime paid balance to the farm account, in XCH.</param>
        /// <param name="blocksFound">Number of blocks found by the farm.</param>
        /// <param name="estimatedPlotSizeTiB">Estimated size of the farm, in TiB.</param>
        /// <param name="estimatedPlots">Estimated number of plots in the farm.</param>
        /// <param name="tenureDateTimeUtc">Tenure date (most recent join date) for the farm, used for fee discount reward program.</param>
        /// <param name="pendingPoints">Pending points for the farm in the current PPLNS window.</param>
        /// <param name="accountDisplayName">Display name (or alias) of the farm, if set.</param>
        /// <param name="rank">Rank # of the farm out of total active farms in the pool.</param>
        /// <param name="difficulty">The current difficulty the farm is using to find partial proofs with the pool.</param>
        public FarmV1Model(string launcherId = default(string), double? unpaidBalanceInXCH = default(double?), double? totalPaidInXCH = default(double?), int? blocksFound = default(int?), double? estimatedPlotSizeTiB = default(double?), int? estimatedPlots = default(int?), string tenureDateTimeUtc = default(string), double? pendingPoints = default(double?), string accountDisplayName = default(string), int? rank = default(int?), long? difficulty = default(long?))
        {
            this.LauncherId = launcherId;
            this.UnpaidBalanceInXCH = unpaidBalanceInXCH;
            this.TotalPaidInXCH = totalPaidInXCH;
            this.BlocksFound = blocksFound;
            this.EstimatedPlotSizeTiB = estimatedPlotSizeTiB;
            this.EstimatedPlots = estimatedPlots;
            this.TenureDateTimeUtc = tenureDateTimeUtc;
            this.PendingPoints = pendingPoints;
            this.AccountDisplayName = accountDisplayName;
            this.Rank = rank;
            this.Difficulty = difficulty;
        }

        /// <summary>
        /// Launcher id of the farm
        /// </summary>
        /// <value>Launcher id of the farm</value>
        [DataMember(Name = "launcherId", EmitDefaultValue = true)]
        public string LauncherId { get; set; }

        /// <summary>
        /// Unpaid balance of the farm account, in XCH
        /// </summary>
        /// <value>Unpaid balance of the farm account, in XCH</value>
        [DataMember(Name = "unpaidBalanceInXCH", EmitDefaultValue = true)]
        public double? UnpaidBalanceInXCH { get; set; }

        /// <summary>
        /// Total lifetime paid balance to the farm account, in XCH
        /// </summary>
        /// <value>Total lifetime paid balance to the farm account, in XCH</value>
        [DataMember(Name = "totalPaidInXCH", EmitDefaultValue = true)]
        public double? TotalPaidInXCH { get; set; }

        /// <summary>
        /// Number of blocks found by the farm
        /// </summary>
        /// <value>Number of blocks found by the farm</value>
        [DataMember(Name = "blocksFound", EmitDefaultValue = true)]
        public int? BlocksFound { get; set; }

        /// <summary>
        /// Estimated size of the farm, in TiB
        /// </summary>
        /// <value>Estimated size of the farm, in TiB</value>
        [DataMember(Name = "estimatedPlotSizeTiB", EmitDefaultValue = true)]
        public double? EstimatedPlotSizeTiB { get; set; }

        /// <summary>
        /// Estimated number of plots in the farm
        /// </summary>
        /// <value>Estimated number of plots in the farm</value>
        [DataMember(Name = "estimatedPlots", EmitDefaultValue = true)]
        public int? EstimatedPlots { get; set; }

        /// <summary>
        /// Tenure date (most recent join date) for the farm, used for fee discount reward program
        /// </summary>
        /// <value>Tenure date (most recent join date) for the farm, used for fee discount reward program</value>
        [DataMember(Name = "tenureDateTimeUtc", EmitDefaultValue = true)]
        public string TenureDateTimeUtc { get; set; }

        /// <summary>
        /// Pending points for the farm in the current PPLNS window
        /// </summary>
        /// <value>Pending points for the farm in the current PPLNS window</value>
        [DataMember(Name = "pendingPoints", EmitDefaultValue = true)]
        public double? PendingPoints { get; set; }

        /// <summary>
        /// Display name (or alias) of the farm, if set
        /// </summary>
        /// <value>Display name (or alias) of the farm, if set</value>
        [DataMember(Name = "accountDisplayName", EmitDefaultValue = true)]
        public string AccountDisplayName { get; set; }

        /// <summary>
        /// Rank # of the farm out of total active farms in the pool
        /// </summary>
        /// <value>Rank # of the farm out of total active farms in the pool</value>
        [DataMember(Name = "rank", EmitDefaultValue = true)]
        public int? Rank { get; set; }

        /// <summary>
        /// The current difficulty the farm is using to find partial proofs with the pool
        /// </summary>
        /// <value>The current difficulty the farm is using to find partial proofs with the pool</value>
        [DataMember(Name = "difficulty", EmitDefaultValue = true)]
        public long? Difficulty { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FarmV1Model {\n");
            sb.Append("  LauncherId: ").Append(LauncherId).Append("\n");
            sb.Append("  UnpaidBalanceInXCH: ").Append(UnpaidBalanceInXCH).Append("\n");
            sb.Append("  TotalPaidInXCH: ").Append(TotalPaidInXCH).Append("\n");
            sb.Append("  BlocksFound: ").Append(BlocksFound).Append("\n");
            sb.Append("  EstimatedPlotSizeTiB: ").Append(EstimatedPlotSizeTiB).Append("\n");
            sb.Append("  EstimatedPlots: ").Append(EstimatedPlots).Append("\n");
            sb.Append("  TenureDateTimeUtc: ").Append(TenureDateTimeUtc).Append("\n");
            sb.Append("  PendingPoints: ").Append(PendingPoints).Append("\n");
            sb.Append("  AccountDisplayName: ").Append(AccountDisplayName).Append("\n");
            sb.Append("  Rank: ").Append(Rank).Append("\n");
            sb.Append("  Difficulty: ").Append(Difficulty).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FarmV1Model);
        }

        /// <summary>
        /// Returns true if FarmV1Model instances are equal
        /// </summary>
        /// <param name="input">Instance of FarmV1Model to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FarmV1Model input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.LauncherId == input.LauncherId ||
                    (this.LauncherId != null &&
                    this.LauncherId.Equals(input.LauncherId))
                ) && 
                (
                    this.UnpaidBalanceInXCH == input.UnpaidBalanceInXCH ||
                    (this.UnpaidBalanceInXCH != null &&
                    this.UnpaidBalanceInXCH.Equals(input.UnpaidBalanceInXCH))
                ) && 
                (
                    this.TotalPaidInXCH == input.TotalPaidInXCH ||
                    (this.TotalPaidInXCH != null &&
                    this.TotalPaidInXCH.Equals(input.TotalPaidInXCH))
                ) && 
                (
                    this.BlocksFound == input.BlocksFound ||
                    (this.BlocksFound != null &&
                    this.BlocksFound.Equals(input.BlocksFound))
                ) && 
                (
                    this.EstimatedPlotSizeTiB == input.EstimatedPlotSizeTiB ||
                    (this.EstimatedPlotSizeTiB != null &&
                    this.EstimatedPlotSizeTiB.Equals(input.EstimatedPlotSizeTiB))
                ) && 
                (
                    this.EstimatedPlots == input.EstimatedPlots ||
                    (this.EstimatedPlots != null &&
                    this.EstimatedPlots.Equals(input.EstimatedPlots))
                ) && 
                (
                    this.TenureDateTimeUtc == input.TenureDateTimeUtc ||
                    (this.TenureDateTimeUtc != null &&
                    this.TenureDateTimeUtc.Equals(input.TenureDateTimeUtc))
                ) && 
                (
                    this.PendingPoints == input.PendingPoints ||
                    (this.PendingPoints != null &&
                    this.PendingPoints.Equals(input.PendingPoints))
                ) && 
                (
                    this.AccountDisplayName == input.AccountDisplayName ||
                    (this.AccountDisplayName != null &&
                    this.AccountDisplayName.Equals(input.AccountDisplayName))
                ) && 
                (
                    this.Rank == input.Rank ||
                    (this.Rank != null &&
                    this.Rank.Equals(input.Rank))
                ) && 
                (
                    this.Difficulty == input.Difficulty ||
                    (this.Difficulty != null &&
                    this.Difficulty.Equals(input.Difficulty))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LauncherId != null)
                {
                    hashCode = (hashCode * 59) + this.LauncherId.GetHashCode();
                }
                if (this.UnpaidBalanceInXCH != null)
                {
                    hashCode = (hashCode * 59) + this.UnpaidBalanceInXCH.GetHashCode();
                }
                if (this.TotalPaidInXCH != null)
                {
                    hashCode = (hashCode * 59) + this.TotalPaidInXCH.GetHashCode();
                }
                if (this.BlocksFound != null)
                {
                    hashCode = (hashCode * 59) + this.BlocksFound.GetHashCode();
                }
                if (this.EstimatedPlotSizeTiB != null)
                {
                    hashCode = (hashCode * 59) + this.EstimatedPlotSizeTiB.GetHashCode();
                }
                if (this.EstimatedPlots != null)
                {
                    hashCode = (hashCode * 59) + this.EstimatedPlots.GetHashCode();
                }
                if (this.TenureDateTimeUtc != null)
                {
                    hashCode = (hashCode * 59) + this.TenureDateTimeUtc.GetHashCode();
                }
                if (this.PendingPoints != null)
                {
                    hashCode = (hashCode * 59) + this.PendingPoints.GetHashCode();
                }
                if (this.AccountDisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.AccountDisplayName.GetHashCode();
                }
                if (this.Rank != null)
                {
                    hashCode = (hashCode * 59) + this.Rank.GetHashCode();
                }
                if (this.Difficulty != null)
                {
                    hashCode = (hashCode * 59) + this.Difficulty.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
