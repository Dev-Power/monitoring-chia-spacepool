/*
 * Space Pool Developer API
 *
 * Space Pool public developer REST APIs
 *
 * The version of the OpenAPI document: v1
 * Contact: info@pool.space
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SpacePoolMonitor.ApiClient.Client.OpenAPIDateConverter;

namespace SpacePoolMonitor.ApiClient.Model
{
    /// <summary>
    /// PoolInfoV1Response
    /// </summary>
    [DataContract(Name = "PoolInfoV1Response")]
    public partial class PoolInfoV1Response : IEquatable<PoolInfoV1Response>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PoolInfoV1Response" /> class.
        /// </summary>
        /// <param name="totalNetSpaceTiB">Total estimated netspace of the entire Chia network, in TiB.</param>
        /// <param name="poolNetSpaceTiB">Total estimated netspace of the pool, in TiB.</param>
        /// <param name="naPoolNetSpaceTiB">Total estimated netspace of pool farmers in the Americas, in TiB.</param>
        /// <param name="euPoolNetSpaceTiB">Total estimated netspace of pool farmers in Europe, in TiB.</param>
        /// <param name="asiaPoolNetSpaceTiB">Total estimated netspace of pool farmers in Asia, in TiB.</param>
        /// <param name="totalActiveFarms">Total number of recently active farms in the pool.</param>
        /// <param name="estimatedTimeToWinSeconds">Estimated time for the pool to win a block.</param>
        /// <param name="minimumPayoutBalanceInXCH">Minimum balance for farmers to trigger a payout, in XCH.</param>
        public PoolInfoV1Response(double totalNetSpaceTiB = default(double), double poolNetSpaceTiB = default(double), double naPoolNetSpaceTiB = default(double), double euPoolNetSpaceTiB = default(double), double asiaPoolNetSpaceTiB = default(double), int totalActiveFarms = default(int), double estimatedTimeToWinSeconds = default(double), double minimumPayoutBalanceInXCH = default(double))
        {
            this.TotalNetSpaceTiB = totalNetSpaceTiB;
            this.PoolNetSpaceTiB = poolNetSpaceTiB;
            this.NaPoolNetSpaceTiB = naPoolNetSpaceTiB;
            this.EuPoolNetSpaceTiB = euPoolNetSpaceTiB;
            this.AsiaPoolNetSpaceTiB = asiaPoolNetSpaceTiB;
            this.TotalActiveFarms = totalActiveFarms;
            this.EstimatedTimeToWinSeconds = estimatedTimeToWinSeconds;
            this.MinimumPayoutBalanceInXCH = minimumPayoutBalanceInXCH;
        }

        /// <summary>
        /// Total estimated netspace of the entire Chia network, in TiB
        /// </summary>
        /// <value>Total estimated netspace of the entire Chia network, in TiB</value>
        [DataMember(Name = "totalNetSpaceTiB", EmitDefaultValue = false)]
        public double TotalNetSpaceTiB { get; set; }

        /// <summary>
        /// Total estimated netspace of the pool, in TiB
        /// </summary>
        /// <value>Total estimated netspace of the pool, in TiB</value>
        [DataMember(Name = "poolNetSpaceTiB", EmitDefaultValue = false)]
        public double PoolNetSpaceTiB { get; set; }

        /// <summary>
        /// Total estimated netspace of pool farmers in the Americas, in TiB
        /// </summary>
        /// <value>Total estimated netspace of pool farmers in the Americas, in TiB</value>
        [DataMember(Name = "naPoolNetSpaceTiB", EmitDefaultValue = false)]
        public double NaPoolNetSpaceTiB { get; set; }

        /// <summary>
        /// Total estimated netspace of pool farmers in Europe, in TiB
        /// </summary>
        /// <value>Total estimated netspace of pool farmers in Europe, in TiB</value>
        [DataMember(Name = "euPoolNetSpaceTiB", EmitDefaultValue = false)]
        public double EuPoolNetSpaceTiB { get; set; }

        /// <summary>
        /// Total estimated netspace of pool farmers in Asia, in TiB
        /// </summary>
        /// <value>Total estimated netspace of pool farmers in Asia, in TiB</value>
        [DataMember(Name = "asiaPoolNetSpaceTiB", EmitDefaultValue = false)]
        public double AsiaPoolNetSpaceTiB { get; set; }

        /// <summary>
        /// Total number of recently active farms in the pool
        /// </summary>
        /// <value>Total number of recently active farms in the pool</value>
        [DataMember(Name = "totalActiveFarms", EmitDefaultValue = false)]
        public int TotalActiveFarms { get; set; }

        /// <summary>
        /// Estimated time for the pool to win a block
        /// </summary>
        /// <value>Estimated time for the pool to win a block</value>
        [DataMember(Name = "estimatedTimeToWinSeconds", EmitDefaultValue = false)]
        public double EstimatedTimeToWinSeconds { get; set; }

        /// <summary>
        /// Minimum balance for farmers to trigger a payout, in XCH
        /// </summary>
        /// <value>Minimum balance for farmers to trigger a payout, in XCH</value>
        [DataMember(Name = "minimumPayoutBalanceInXCH", EmitDefaultValue = false)]
        public double MinimumPayoutBalanceInXCH { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PoolInfoV1Response {\n");
            sb.Append("  TotalNetSpaceTiB: ").Append(TotalNetSpaceTiB).Append("\n");
            sb.Append("  PoolNetSpaceTiB: ").Append(PoolNetSpaceTiB).Append("\n");
            sb.Append("  NaPoolNetSpaceTiB: ").Append(NaPoolNetSpaceTiB).Append("\n");
            sb.Append("  EuPoolNetSpaceTiB: ").Append(EuPoolNetSpaceTiB).Append("\n");
            sb.Append("  AsiaPoolNetSpaceTiB: ").Append(AsiaPoolNetSpaceTiB).Append("\n");
            sb.Append("  TotalActiveFarms: ").Append(TotalActiveFarms).Append("\n");
            sb.Append("  EstimatedTimeToWinSeconds: ").Append(EstimatedTimeToWinSeconds).Append("\n");
            sb.Append("  MinimumPayoutBalanceInXCH: ").Append(MinimumPayoutBalanceInXCH).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PoolInfoV1Response);
        }

        /// <summary>
        /// Returns true if PoolInfoV1Response instances are equal
        /// </summary>
        /// <param name="input">Instance of PoolInfoV1Response to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PoolInfoV1Response input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TotalNetSpaceTiB == input.TotalNetSpaceTiB ||
                    this.TotalNetSpaceTiB.Equals(input.TotalNetSpaceTiB)
                ) && 
                (
                    this.PoolNetSpaceTiB == input.PoolNetSpaceTiB ||
                    this.PoolNetSpaceTiB.Equals(input.PoolNetSpaceTiB)
                ) && 
                (
                    this.NaPoolNetSpaceTiB == input.NaPoolNetSpaceTiB ||
                    this.NaPoolNetSpaceTiB.Equals(input.NaPoolNetSpaceTiB)
                ) && 
                (
                    this.EuPoolNetSpaceTiB == input.EuPoolNetSpaceTiB ||
                    this.EuPoolNetSpaceTiB.Equals(input.EuPoolNetSpaceTiB)
                ) && 
                (
                    this.AsiaPoolNetSpaceTiB == input.AsiaPoolNetSpaceTiB ||
                    this.AsiaPoolNetSpaceTiB.Equals(input.AsiaPoolNetSpaceTiB)
                ) && 
                (
                    this.TotalActiveFarms == input.TotalActiveFarms ||
                    this.TotalActiveFarms.Equals(input.TotalActiveFarms)
                ) && 
                (
                    this.EstimatedTimeToWinSeconds == input.EstimatedTimeToWinSeconds ||
                    this.EstimatedTimeToWinSeconds.Equals(input.EstimatedTimeToWinSeconds)
                ) && 
                (
                    this.MinimumPayoutBalanceInXCH == input.MinimumPayoutBalanceInXCH ||
                    this.MinimumPayoutBalanceInXCH.Equals(input.MinimumPayoutBalanceInXCH)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.TotalNetSpaceTiB.GetHashCode();
                hashCode = (hashCode * 59) + this.PoolNetSpaceTiB.GetHashCode();
                hashCode = (hashCode * 59) + this.NaPoolNetSpaceTiB.GetHashCode();
                hashCode = (hashCode * 59) + this.EuPoolNetSpaceTiB.GetHashCode();
                hashCode = (hashCode * 59) + this.AsiaPoolNetSpaceTiB.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalActiveFarms.GetHashCode();
                hashCode = (hashCode * 59) + this.EstimatedTimeToWinSeconds.GetHashCode();
                hashCode = (hashCode * 59) + this.MinimumPayoutBalanceInXCH.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
