/*
 * Space Pool Developer API
 *
 * Space Pool public developer REST APIs
 *
 * The version of the OpenAPI document: v1
 * Contact: info@pool.space
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SpacePoolMonitor.ApiClient.Client.OpenAPIDateConverter;

namespace SpacePoolMonitor.ApiClient.Model
{
    /// <summary>
    /// BlockV1Model
    /// </summary>
    [DataContract(Name = "BlockV1Model")]
    public partial class BlockV1Model : IEquatable<BlockV1Model>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public BlockConfirmationStatusV1? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BlockV1Model" /> class.
        /// </summary>
        /// <param name="luckPercent">Percent of how lucky this block reward was compared to expectation from size of the pool, normalized to 1. Less than 1 means the pool was lucky. More than 1 signifies the pool was unlucky..</param>
        /// <param name="blockNumber">Block number that the reward was confirmed on.</param>
        /// <param name="rewardInXCH">Amount of the block reward, in XCH.</param>
        /// <param name="creationDateTimeUtc">Date and time that the block was confirmed on the blockchain.</param>
        /// <param name="winnerLauncherId">Launcher id of the winner of the block reward.</param>
        /// <param name="status">status.</param>
        public BlockV1Model(double? luckPercent = default(double?), long blockNumber = default(long), double rewardInXCH = default(double), string creationDateTimeUtc = default(string), string winnerLauncherId = default(string), BlockConfirmationStatusV1? status = default(BlockConfirmationStatusV1?))
        {
            this.LuckPercent = luckPercent;
            this.BlockNumber = blockNumber;
            this.RewardInXCH = rewardInXCH;
            this.CreationDateTimeUtc = creationDateTimeUtc;
            this.WinnerLauncherId = winnerLauncherId;
            this.Status = status;
        }

        /// <summary>
        /// Percent of how lucky this block reward was compared to expectation from size of the pool, normalized to 1. Less than 1 means the pool was lucky. More than 1 signifies the pool was unlucky.
        /// </summary>
        /// <value>Percent of how lucky this block reward was compared to expectation from size of the pool, normalized to 1. Less than 1 means the pool was lucky. More than 1 signifies the pool was unlucky.</value>
        [DataMember(Name = "luckPercent", EmitDefaultValue = true)]
        public double? LuckPercent { get; set; }

        /// <summary>
        /// Block number that the reward was confirmed on
        /// </summary>
        /// <value>Block number that the reward was confirmed on</value>
        [DataMember(Name = "blockNumber", EmitDefaultValue = false)]
        public long BlockNumber { get; set; }

        /// <summary>
        /// Amount of the block reward, in XCH
        /// </summary>
        /// <value>Amount of the block reward, in XCH</value>
        [DataMember(Name = "rewardInXCH", EmitDefaultValue = false)]
        public double RewardInXCH { get; set; }

        /// <summary>
        /// Date and time that the block was confirmed on the blockchain
        /// </summary>
        /// <value>Date and time that the block was confirmed on the blockchain</value>
        [DataMember(Name = "creationDateTimeUtc", EmitDefaultValue = true)]
        public string CreationDateTimeUtc { get; set; }

        /// <summary>
        /// Launcher id of the winner of the block reward
        /// </summary>
        /// <value>Launcher id of the winner of the block reward</value>
        [DataMember(Name = "winnerLauncherId", EmitDefaultValue = true)]
        public string WinnerLauncherId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BlockV1Model {\n");
            sb.Append("  LuckPercent: ").Append(LuckPercent).Append("\n");
            sb.Append("  BlockNumber: ").Append(BlockNumber).Append("\n");
            sb.Append("  RewardInXCH: ").Append(RewardInXCH).Append("\n");
            sb.Append("  CreationDateTimeUtc: ").Append(CreationDateTimeUtc).Append("\n");
            sb.Append("  WinnerLauncherId: ").Append(WinnerLauncherId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BlockV1Model);
        }

        /// <summary>
        /// Returns true if BlockV1Model instances are equal
        /// </summary>
        /// <param name="input">Instance of BlockV1Model to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BlockV1Model input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.LuckPercent == input.LuckPercent ||
                    (this.LuckPercent != null &&
                    this.LuckPercent.Equals(input.LuckPercent))
                ) && 
                (
                    this.BlockNumber == input.BlockNumber ||
                    this.BlockNumber.Equals(input.BlockNumber)
                ) && 
                (
                    this.RewardInXCH == input.RewardInXCH ||
                    this.RewardInXCH.Equals(input.RewardInXCH)
                ) && 
                (
                    this.CreationDateTimeUtc == input.CreationDateTimeUtc ||
                    (this.CreationDateTimeUtc != null &&
                    this.CreationDateTimeUtc.Equals(input.CreationDateTimeUtc))
                ) && 
                (
                    this.WinnerLauncherId == input.WinnerLauncherId ||
                    (this.WinnerLauncherId != null &&
                    this.WinnerLauncherId.Equals(input.WinnerLauncherId))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LuckPercent != null)
                {
                    hashCode = (hashCode * 59) + this.LuckPercent.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BlockNumber.GetHashCode();
                hashCode = (hashCode * 59) + this.RewardInXCH.GetHashCode();
                if (this.CreationDateTimeUtc != null)
                {
                    hashCode = (hashCode * 59) + this.CreationDateTimeUtc.GetHashCode();
                }
                if (this.WinnerLauncherId != null)
                {
                    hashCode = (hashCode * 59) + this.WinnerLauncherId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
